// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: review.proto

package review

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReviewesClient is the client API for Reviewes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReviewesClient interface {
	CreateReview(ctx context.Context, in *NewData, opts ...grpc.CallOption) (*Id, error)
	UpdateReview(ctx context.Context, in *UReview, opts ...grpc.CallOption) (*Review, error)
	DeleteReview(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Void, error)
	FetchReviews(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Reviews, error)
}

type reviewesClient struct {
	cc grpc.ClientConnInterface
}

func NewReviewesClient(cc grpc.ClientConnInterface) ReviewesClient {
	return &reviewesClient{cc}
}

func (c *reviewesClient) CreateReview(ctx context.Context, in *NewData, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/review.Reviewes/CreateReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewesClient) UpdateReview(ctx context.Context, in *UReview, opts ...grpc.CallOption) (*Review, error) {
	out := new(Review)
	err := c.cc.Invoke(ctx, "/review.Reviewes/UpdateReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewesClient) DeleteReview(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/review.Reviewes/DeleteReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewesClient) FetchReviews(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Reviews, error) {
	out := new(Reviews)
	err := c.cc.Invoke(ctx, "/review.Reviewes/FetchReviews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReviewesServer is the server API for Reviewes service.
// All implementations must embed UnimplementedReviewesServer
// for forward compatibility
type ReviewesServer interface {
	CreateReview(context.Context, *NewData) (*Id, error)
	UpdateReview(context.Context, *UReview) (*Review, error)
	DeleteReview(context.Context, *Id) (*Void, error)
	FetchReviews(context.Context, *Pagination) (*Reviews, error)
	mustEmbedUnimplementedReviewesServer()
}

// UnimplementedReviewesServer must be embedded to have forward compatible implementations.
type UnimplementedReviewesServer struct {
}

func (UnimplementedReviewesServer) CreateReview(context.Context, *NewData) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReview not implemented")
}
func (UnimplementedReviewesServer) UpdateReview(context.Context, *UReview) (*Review, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReview not implemented")
}
func (UnimplementedReviewesServer) DeleteReview(context.Context, *Id) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReview not implemented")
}
func (UnimplementedReviewesServer) FetchReviews(context.Context, *Pagination) (*Reviews, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchReviews not implemented")
}
func (UnimplementedReviewesServer) mustEmbedUnimplementedReviewesServer() {}

// UnsafeReviewesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReviewesServer will
// result in compilation errors.
type UnsafeReviewesServer interface {
	mustEmbedUnimplementedReviewesServer()
}

func RegisterReviewesServer(s grpc.ServiceRegistrar, srv ReviewesServer) {
	s.RegisterService(&Reviewes_ServiceDesc, srv)
}

func _Reviewes_CreateReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewesServer).CreateReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/review.Reviewes/CreateReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewesServer).CreateReview(ctx, req.(*NewData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reviewes_UpdateReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UReview)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewesServer).UpdateReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/review.Reviewes/UpdateReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewesServer).UpdateReview(ctx, req.(*UReview))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reviewes_DeleteReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewesServer).DeleteReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/review.Reviewes/DeleteReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewesServer).DeleteReview(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reviewes_FetchReviews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewesServer).FetchReviews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/review.Reviewes/FetchReviews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewesServer).FetchReviews(ctx, req.(*Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

// Reviewes_ServiceDesc is the grpc.ServiceDesc for Reviewes service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Reviewes_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "review.Reviewes",
	HandlerType: (*ReviewesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateReview",
			Handler:    _Reviewes_CreateReview_Handler,
		},
		{
			MethodName: "UpdateReview",
			Handler:    _Reviewes_UpdateReview_Handler,
		},
		{
			MethodName: "DeleteReview",
			Handler:    _Reviewes_DeleteReview_Handler,
		},
		{
			MethodName: "FetchReviews",
			Handler:    _Reviewes_FetchReviews_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "review.proto",
}
