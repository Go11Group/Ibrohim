// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: basket.proto

package basket

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BasketClient is the client API for Basket service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BasketClient interface {
	AddProduct(ctx context.Context, in *NewProduct, opts ...grpc.CallOption) (*Void, error)
	GetProducts(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Products, error)
	UpdateProduct(ctx context.Context, in *Quantity, opts ...grpc.CallOption) (*Void, error)
	RemoveProduct(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Void, error)
}

type basketClient struct {
	cc grpc.ClientConnInterface
}

func NewBasketClient(cc grpc.ClientConnInterface) BasketClient {
	return &basketClient{cc}
}

func (c *basketClient) AddProduct(ctx context.Context, in *NewProduct, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/basket.Basket/AddProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketClient) GetProducts(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Products, error) {
	out := new(Products)
	err := c.cc.Invoke(ctx, "/basket.Basket/GetProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketClient) UpdateProduct(ctx context.Context, in *Quantity, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/basket.Basket/UpdateProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketClient) RemoveProduct(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/basket.Basket/RemoveProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BasketServer is the server API for Basket service.
// All implementations must embed UnimplementedBasketServer
// for forward compatibility
type BasketServer interface {
	AddProduct(context.Context, *NewProduct) (*Void, error)
	GetProducts(context.Context, *Void) (*Products, error)
	UpdateProduct(context.Context, *Quantity) (*Void, error)
	RemoveProduct(context.Context, *Id) (*Void, error)
	mustEmbedUnimplementedBasketServer()
}

// UnimplementedBasketServer must be embedded to have forward compatible implementations.
type UnimplementedBasketServer struct {
}

func (UnimplementedBasketServer) AddProduct(context.Context, *NewProduct) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProduct not implemented")
}
func (UnimplementedBasketServer) GetProducts(context.Context, *Void) (*Products, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProducts not implemented")
}
func (UnimplementedBasketServer) UpdateProduct(context.Context, *Quantity) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProduct not implemented")
}
func (UnimplementedBasketServer) RemoveProduct(context.Context, *Id) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveProduct not implemented")
}
func (UnimplementedBasketServer) mustEmbedUnimplementedBasketServer() {}

// UnsafeBasketServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BasketServer will
// result in compilation errors.
type UnsafeBasketServer interface {
	mustEmbedUnimplementedBasketServer()
}

func RegisterBasketServer(s grpc.ServiceRegistrar, srv BasketServer) {
	s.RegisterService(&Basket_ServiceDesc, srv)
}

func _Basket_AddProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewProduct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketServer).AddProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/basket.Basket/AddProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketServer).AddProduct(ctx, req.(*NewProduct))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basket_GetProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketServer).GetProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/basket.Basket/GetProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketServer).GetProducts(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basket_UpdateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Quantity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketServer).UpdateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/basket.Basket/UpdateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketServer).UpdateProduct(ctx, req.(*Quantity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basket_RemoveProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketServer).RemoveProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/basket.Basket/RemoveProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketServer).RemoveProduct(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

// Basket_ServiceDesc is the grpc.ServiceDesc for Basket service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Basket_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "basket.Basket",
	HandlerType: (*BasketServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddProduct",
			Handler:    _Basket_AddProduct_Handler,
		},
		{
			MethodName: "GetProducts",
			Handler:    _Basket_GetProducts_Handler,
		},
		{
			MethodName: "UpdateProduct",
			Handler:    _Basket_UpdateProduct_Handler,
		},
		{
			MethodName: "RemoveProduct",
			Handler:    _Basket_RemoveProduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "basket.proto",
}
