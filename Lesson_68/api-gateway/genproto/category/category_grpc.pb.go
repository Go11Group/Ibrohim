// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: category.proto

package category

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CategorysClient is the client API for Categorys service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CategorysClient interface {
	GetCategories(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Categories, error)
	CreateCategory(ctx context.Context, in *Category, opts ...grpc.CallOption) (*Id, error)
	UpdateCategory(ctx context.Context, in *Category, opts ...grpc.CallOption) (*Category, error)
	DeleteCategory(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Void, error)
}

type categorysClient struct {
	cc grpc.ClientConnInterface
}

func NewCategorysClient(cc grpc.ClientConnInterface) CategorysClient {
	return &categorysClient{cc}
}

func (c *categorysClient) GetCategories(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Categories, error) {
	out := new(Categories)
	err := c.cc.Invoke(ctx, "/category.Categorys/GetCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categorysClient) CreateCategory(ctx context.Context, in *Category, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/category.Categorys/CreateCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categorysClient) UpdateCategory(ctx context.Context, in *Category, opts ...grpc.CallOption) (*Category, error) {
	out := new(Category)
	err := c.cc.Invoke(ctx, "/category.Categorys/UpdateCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categorysClient) DeleteCategory(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/category.Categorys/DeleteCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CategorysServer is the server API for Categorys service.
// All implementations must embed UnimplementedCategorysServer
// for forward compatibility
type CategorysServer interface {
	GetCategories(context.Context, *Pagination) (*Categories, error)
	CreateCategory(context.Context, *Category) (*Id, error)
	UpdateCategory(context.Context, *Category) (*Category, error)
	DeleteCategory(context.Context, *Id) (*Void, error)
	mustEmbedUnimplementedCategorysServer()
}

// UnimplementedCategorysServer must be embedded to have forward compatible implementations.
type UnimplementedCategorysServer struct {
}

func (UnimplementedCategorysServer) GetCategories(context.Context, *Pagination) (*Categories, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategories not implemented")
}
func (UnimplementedCategorysServer) CreateCategory(context.Context, *Category) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCategory not implemented")
}
func (UnimplementedCategorysServer) UpdateCategory(context.Context, *Category) (*Category, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCategory not implemented")
}
func (UnimplementedCategorysServer) DeleteCategory(context.Context, *Id) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCategory not implemented")
}
func (UnimplementedCategorysServer) mustEmbedUnimplementedCategorysServer() {}

// UnsafeCategorysServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CategorysServer will
// result in compilation errors.
type UnsafeCategorysServer interface {
	mustEmbedUnimplementedCategorysServer()
}

func RegisterCategorysServer(s grpc.ServiceRegistrar, srv CategorysServer) {
	s.RegisterService(&Categorys_ServiceDesc, srv)
}

func _Categorys_GetCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategorysServer).GetCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/category.Categorys/GetCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategorysServer).GetCategories(ctx, req.(*Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _Categorys_CreateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Category)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategorysServer).CreateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/category.Categorys/CreateCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategorysServer).CreateCategory(ctx, req.(*Category))
	}
	return interceptor(ctx, in, info, handler)
}

func _Categorys_UpdateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Category)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategorysServer).UpdateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/category.Categorys/UpdateCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategorysServer).UpdateCategory(ctx, req.(*Category))
	}
	return interceptor(ctx, in, info, handler)
}

func _Categorys_DeleteCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategorysServer).DeleteCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/category.Categorys/DeleteCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategorysServer).DeleteCategory(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

// Categorys_ServiceDesc is the grpc.ServiceDesc for Categorys service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Categorys_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "category.Categorys",
	HandlerType: (*CategorysServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCategories",
			Handler:    _Categorys_GetCategories_Handler,
		},
		{
			MethodName: "CreateCategory",
			Handler:    _Categorys_CreateCategory_Handler,
		},
		{
			MethodName: "UpdateCategory",
			Handler:    _Categorys_UpdateCategory_Handler,
		},
		{
			MethodName: "DeleteCategory",
			Handler:    _Categorys_DeleteCategory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "category.proto",
}
